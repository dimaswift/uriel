#pragma kernel Init
#pragma kernel Tick

#define PI 3.14159265359

struct Source
{
    float2 position;
    int frequency;
    float amplitude;
};


RWTexture3D<float4> Result;
int Shell_0;
int Shell_1;
int Shell_2;
int SourcesCount;
int Width;
int Height;
float Frequency_0;
float Frequency_1;
float Frequency_2;

float Amplitude_0;
float Amplitude_1;
float Amplitude_2;
float Threshold;
float3 Center;
float3 Offset;
float Angle;
float ColorScale;
float ColorOffset;
float4 ColorSteps;
float Time;
float MaxColor;
float MinColor;

int ZIndex;

float3 hsv2rgb(float h, float s, float v) {
    h = frac(h);
    float i = floor(h * ColorScale);
    float f = h * ColorScale - i;
    float p = v * (ColorSteps[0] - s);
    float q = v * (ColorSteps[1] - f * s);
    float t = v * (ColorSteps[2] - (ColorSteps[3] - f) * s);
    if(i == 0.0) return float3(v, t, p);
    if(i == 1.0) return float3(q, v, p);
    if(i == 2.0) return float3(p, v, t);
    if(i == 3.0) return float3(p, q, v);
    if(i == 4.0) return float3(t, p, v);
    return float3(v, p, q);
}

[numthreads(8,8,1)]
void Init (uint3 id : SV_DispatchThreadID)
{
    Result[uint3(id.xy, ZIndex)] = float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 0.0);
}

[numthreads(64, 1, 1)]  
void Tick (uint3 id : SV_DispatchThreadID)
{
    float v = 0.0;
    const float3 uv = float3((float)id.x / Width, (float)id.y / Width, (float(ZIndex) / Width)) + Center;
    for (int i = 0; i < Shell_0; i++) {
        
        const float a = float(i) / float(Shell_0) * PI * 2;
        const float3 source = float3(sin(a),cos(a),-sin(a));
        const float d_mirror = distance(uv, source)  * ColorScale;
        v += sin(sqrt(d_mirror) * (Frequency_0 )) * Amplitude_0;
    }
   
    float grayscale = smoothstep(v, MinColor, MaxColor);
    Result[uint3(id.xy, ZIndex)] = float4(grayscale, grayscale, grayscale, grayscale);
}
