#pragma kernel Init
#pragma kernel Tick

#define PI 3.14159265359

struct Node
{
    float3 position;
    float phase;
};

RWStructuredBuffer<Node> Nodes;
int ZIndex;

[numthreads(8,8,1)]
void Init (uint3 id : SV_DispatchThreadID)
{
    
}

[numthreads(64, 1, 1)]  
void Tick (uint3 id : SV_DispatchThreadID)
{
    float v = 0.0;
    const float3 uv = float3((float)id.x / Width, (float)id.y / Width, (float(ZIndex) / Width)) + Center;
    for (int i = 0; i < Shell_0; i++) {
        
        const float a = float(i) / float(Shell_0) * PI * 2;
        const float3 source = float3(sin(a), cos(a), -sin(float(i) / float(Shell_0) * PI * SourcesCount));
        const float d_mirror = distance(uv, source)  * ColorScale;
        v += sin(sqrt(d_mirror) * (Frequency_0 )) * Amplitude_0;
    }
   
    float grayscale = smoothstep(v, MinColor, MaxColor);
    Nodes[uint3(id.xy, ZIndex)] = float4(grayscale, grayscale, grayscale, grayscale);
}
