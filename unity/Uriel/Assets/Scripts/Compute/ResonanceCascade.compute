#pragma kernel ComputeField
#pragma kernel ClearField
#pragma kernel ClearScreen
#pragma kernel RenderScreen
#pragma kernel RenderParticles
#pragma kernel ComputeParticles
#pragma kernel SpawnParticles
#pragma kernel FadeParticles
#pragma kernel CollapseField
#pragma kernel ClearParticles

#include "Assets/Scripts/Lib/Uriel.cginc"

struct Resonance
{
    int current;
};

uint _FieldResolution;
uint _ParticleResolution;
float _Scale;
float _DeltaTime;
float _CanvasFadeSpeed;
float3 _Offset;

int _ParticleRadius;
float _Acceleration;
float _Speed;
float _Attraction;
float _Repulsion;
float _Lifetime;
float _PhaseSpeed;
float _Time;
float _Gravity;
float _Radius;

uint2 _MousePosition;

RWTexture2D<float4> _ParticlePositions;
RWTexture2D<float4> _OldParticlePositions;
RWTexture2D<float4> _Field;
RWTexture2D<float4> _Screen;
RWTexture2D<float4> _ParticleCanvas;
Texture2D<float4> _Gradient;
float _GradientSize;
float _GradientThreshold;
float _GradientMultiplier;
float3 _Multiplier;
uint _SpawnCounter;
float2 _SpawnPoint;

StructuredBuffer<Modulation> _ModulationBuffer;
uint _ModulationCount;

[numthreads(8, 8, 1)]
void ClearField(uint3 id : SV_DispatchThreadID)
{
    _Field[id.xy] = float4(0,0,0,0);
}

[numthreads(8, 8, 1)]
void ClearParticles(uint3 id : SV_DispatchThreadID)
{
    _ParticlePositions[id.xy] = float4(0,0,0,0);
    _OldParticlePositions[id.xy] = float4(0,0,0,0);
}

[numthreads(8, 8, 1)]
void ClearScreen(uint3 id : SV_DispatchThreadID)
{
    _Screen[id.xy] = float4(0,0,0,0);
    _ParticleCanvas[id.xy] = float4(0,0,0,0);
}

[numthreads(8, 8, 1)]
void FadeParticles(uint3 id : SV_DispatchThreadID)
{
    float4 col = _ParticleCanvas[id.xy];
    col = lerp(col, float4(0,0,0,1), _Speed * _CanvasFadeSpeed);
    _ParticleCanvas[id.xy] = col;
}

[numthreads(8, 8, 1)]
void RenderScreen(uint3 id : SV_DispatchThreadID)
{
    _Screen[id.xy] = _Field[id.xy];
}

[numthreads(8, 8, 1)]
void RenderParticles(uint3 id : SV_DispatchThreadID)
{
    float4 pos = _ParticlePositions[id.xy];
    const int2 pixelPos = int2(round(pos.x), round(pos.y));
    if (pixelPos.x < 0 || pixelPos.x >= _ParticleResolution || pixelPos.y < 0 || pixelPos.y >= _ParticleResolution)
    {
        return;
    }
    float4 prevPos = _OldParticlePositions[id.xy];
    float4 col = _ParticleCanvas[pixelPos];
    float m = length(prevPos.xy - pos) * _GradientThreshold;
    //col += float4(hsv2rgb(m, 1, _GradientMultiplier * length(prevPos.xy - pos) * 0.001), 0);
    col += _Gradient[uint2(uint(m), 0)] * _GradientMultiplier  * length(prevPos.xy - pos) * 0.001;
    col.w = 1;
    _ParticleCanvas[pixelPos] = col;
}

[numthreads(8, 8, 1)]
void CollapseField(uint3 id : SV_DispatchThreadID)
{
    float4 p = _ParticlePositions[id.xy];
    _ParticlePositions[id.xy] = float4(id.x, id.y, p.z, 1.0);
    _OldParticlePositions[id.xy] = float4(id.x, id.y, 0, 1);
}

[numthreads(8, 8, 1)]
void ComputeField(uint3 id : SV_DispatchThreadID)
{
    const float xPos = float(id.x) / (_FieldResolution - 1);  
    const float yPos = float(id.y) / (_FieldResolution - 1);
    const float2 uv = float2(xPos - 0.5, yPos - 0.5) * _Scale;
    const float density = sampleField(float3(uv, sin(_ModulationBuffer[0].time)), _ModulationBuffer[0]);
    float3 c = hsv2rgb(density * 0.01, 1, 1);
    float grey = (c.r + c.g + c.b) / 3.0;
    _Field[id.xy] = float4(grey,grey,grey, 1);
}

[numthreads(8, 8, 1)]
void ComputeParticles(uint3 id : SV_DispatchThreadID)
{
    float4 pos = _ParticlePositions[id.xy];
    const float halfRes = (_FieldResolution) / 2;
    float4 prevPos = _OldParticlePositions[id.xy];
    const int2 fieldCoords = int2(ceil(pos.x), ceil(pos.y));
    const int rad = _ParticleRadius;
    float2 fieldConvergence = float2(0, 0);

    for (int x = -rad; x <= rad; x++)
    {
        for (int y = -rad; y <= rad; y++)
        {
            int2 checkPoint = int2(fieldCoords.x + x, fieldCoords.y + y);
            if(checkPoint.x < 0 || checkPoint.x >= _FieldResolution
                || checkPoint.y < 0 || checkPoint.y >= _FieldResolution)
            {
                continue;
            }
            const float4 fieldDensity = _Field[checkPoint];
            fieldConvergence += float2(x, y) * fieldDensity.r * _Attraction * _Speed;
        }
    }
    const float2 acceleration = float2(fieldConvergence.x, fieldConvergence.y) * _Acceleration;
    
    float2 tmp = pos.xy;
    
    float2 newPos = 2.0 * tmp - prevPos.xy + acceleration * _Speed * _Speed;
    pos.xy = newPos;
    prevPos.xy = tmp;
    const int2 pixelPos = int2(round(pos.x), round(pos.y));
    const float2 center = float2(pos.x - halfRes, pos.y - halfRes);
    //particle is out of bounds, but information is not lost
    //it's re-emitted from the eyes preserving phase and velocity
    if (pixelPos.x < 0 || pixelPos.x >= _ParticleResolution
        || pixelPos.y < 0 || pixelPos.y >= _ParticleResolution ||
        length(center) > _FieldResolution * _Radius)
    {
        //pos.xy = _MousePosition;
        pos.xy = float2(halfRes, halfRes);
        float2 vel = pos - prevPos;
        prevPos.xy = pos + normalize(vel + acceleration * _Speed * _Speed) * _Gravity;
    }
    
    _ParticlePositions[id.xy] = pos;
    _OldParticlePositions[id.xy] = prevPos;
}

[numthreads(1, 1, 1)]
void SpawnParticles(uint3 id : SV_DispatchThreadID)
{
    uint c = _SpawnCounter;
    while (c > 0)
    {
        uint x = round(_SpawnPoint.x);
        uint y = round(_SpawnPoint.y);
        _ParticlePositions[uint2(x, y)] = float4(x,y,0,1);
        _OldParticlePositions[uint2(x, y)] = float4(x,y,0,0);
        c--;
    }
}
