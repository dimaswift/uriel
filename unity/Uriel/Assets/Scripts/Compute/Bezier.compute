
// BezierCurve.compute
#pragma kernel CSMain

// Input buffers
StructuredBuffer<float3> vertexBuffer;
StructuredBuffer<int> indicesBuffer;
StructuredBuffer<float> interpolationBuffer;

// Output buffer
RWStructuredBuffer<float3> outputBuffer;

// Parameters
int curveResolution;

// Cubic Bézier curve function
float3 CubicBezier(float3 p0, float3 p1, float3 p2, float3 p3, float t)
{
    float oneMinusT = 1.0 - t;
    float oneMinusT2 = oneMinusT * oneMinusT;
    float oneMinusT3 = oneMinusT2 * oneMinusT;
    float t2 = t * t;
    float t3 = t2 * t;
    
    return oneMinusT3 * p0 + 
           3.0 * oneMinusT2 * t * p1 + 
           3.0 * oneMinusT * t2 * p2 + 
           t3 * p3;
}

// Alternative: Quadratic Bézier curve function (3 control points)
float3 QuadraticBezier(float3 p0, float3 p1, float3 p2, float t)
{
    float oneMinusT = 1.0 - t;
    return oneMinusT * oneMinusT * p0 + 
           2.0 * oneMinusT * t * p1 + 
           t * t * p2;
}

// Alternative: Linear Bézier curve function (2 control points)
float3 LinearBezier(float3 p0, float3 p1, float t)
{
    return (1.0 - t) * p0 + t * p1;
}

[numthreads(64,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint index = id.x;
    
    // Bounds check
    if (index >= (uint)curveResolution)
        return;
    
    // Get interpolation value (t)
    float t = interpolationBuffer[index];
    
    // Get control points from vertex buffer using indices
    float3 p0 = vertexBuffer[indicesBuffer[0]];
    float3 p1 = vertexBuffer[indicesBuffer[1]];
    float3 p2 = vertexBuffer[indicesBuffer[2]];
    float3 p3 = vertexBuffer[indicesBuffer[3]];
    
    // Calculate Bézier point
    float3 bezierPoint = CubicBezier(p0, p1, p2, p3, t);
    
    // Store result
    outputBuffer[index] = bezierPoint;
}
