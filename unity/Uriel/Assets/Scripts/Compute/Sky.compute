#pragma kernel CSMain

#define PI 3.14159265359

RWStructuredBuffer<float4x4> Particles;

float Time;
float4x4 Config;
float Size;
int Resolution;
float Frequency;
float Density;
int Phase;
float Angle;
float3 Offset;
float Threshold;

[numthreads(64, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    const uint index = id.x;

    uint x = index % Resolution;  
    uint y = (index / Resolution) % Resolution;  
    uint z = index / (Resolution * Resolution);
    float v0 = 0.0;
    float v1 = 0.0;
    float v2 = 0.0;
    float3 off = float3(Resolution, Resolution, Resolution);
    float3 pos = float3(x, y, z) + float3(Resolution * 0.5, Resolution * 0.5, Resolution * 0.5);
    const float polarDistance = length(float3(pos.x, pos.y, pos.z));
    float3 mirrored_uv = pos;
    mirrored_uv.x = abs(pos.x - Threshold) + Offset.x;
    mirrored_uv.y = abs(pos.y - Threshold) + Offset.y;
    mirrored_uv.z = abs(pos.z - Threshold) + Offset.z;
    for (int i = 0; i < Phase; i++) {
        
        const float a = float(i) / float(Phase) * 6.28318530718 * Angle;
        const float t_offset = Time + i * Config[0][0];
        const float deformation = sin(a) *  Config[0][1];
        const float3 source = off + float3(cos(a) * deformation, sin(a), cos(a));
        const float d_mirror = distance(mirrored_uv, source);
        v0 += sin(sqrt(d_mirror) * Frequency) * Density;
        v1 += sin(d_mirror * Frequency) * Density;
        v2 += sin(d_mirror * d_mirror * Frequency) * Density;
    }
    float3 polarOffset = float3(v0, v1, 0);
  //  float3 azimuthalOffset = float3(cos(Frequency * dist + Time), 0, sin(Frequency * dist + Time));
    
   // pos += polarOffset;
  //  pos += azimuthalOffset;
    Particles[index] = float4x4(
        Size, 0, 0, pos.x,
        0, Size, 0, pos.y,
        0, 0, Size, pos.z,
        v0, v1, v2, 1);
}