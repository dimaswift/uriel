#pragma kernel CSMain

#include "Assets/Scripts/Lib/Uriel.cginc"


uint _Width, _Height;
float _Scale;
float3 _Offset;
int3 _Steps;
RWTexture2D<float4> _Texture;

float _PowerThreshold;
float _PowerMultiplier;
float _SpeedThreshold;
float _SpeedMultiplier;


[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    const float xPos = float(id.x) / _Width;  
    const float yPos = float(id.y) / _Height;
    const float3 uv = float3(xPos - 0.5, yPos - 0.5, 0) + _Offset;
    float v = 0.0;

    for (uint i = 0; i < _PhotonCount; ++i)
    {
        const Photon photon = _PhotonBuffer[i];
        v += sampleField(uv, photon);
    } 
    float g = smoothstep(_SpeedThreshold, _SpeedMultiplier, sin(v));
    _Texture[id.xy] = float4(g, g, g, 1.0);
    
}