#pragma kernel Construct
#pragma kernel Clear

#define SIZEOF_UINT 4
#define SIZEOF_FLOAT3 12

RWByteAddressBuffer VertexBuffer;
RWByteAddressBuffer IndexBuffer;
RWStructuredBuffer<uint> Counter;
StructuredBuffer<uint2> TriangleTable;
Texture3D<float> Field;
uint3 Dims;
uint MaxTriangle;
float Scale;
float TargetValue;

float3 TransformPoint(float3 p)
{
    return (p + 0.5 - Dims / 2) * Scale;
}

uint EdgeIndexFromTriangleTable(uint2 data, uint index)
{
    return 0xfu & (index < 8 ? data.x >> ((index + 0) * 4) :
                               data.y >> ((index - 8) * 4));
}

float sampleFieldVoxel(uint x, uint y, uint z)
{
    return Field[uint3(x,y,z)];
}

float4 VoxelValueWithGradient(uint3 i)
{
    uint3 i_n = max(i, 1) - 1;
    uint3 i_p = min(i + 1, Dims - 1);
    float v = sampleFieldVoxel(i.x, i.y, i.z);
    float v_nx = sampleFieldVoxel(i_n.x, i.y, i.z);
    float v_px = sampleFieldVoxel(i_p.x, i.y, i.z);
    float v_ny = sampleFieldVoxel(i.x, i_n.y, i.z);
    float v_py = sampleFieldVoxel(i.x, i_p.y, i.z);
    float v_nz = sampleFieldVoxel(i.x, i.y, i_n.z);
    float v_pz = sampleFieldVoxel(i.x, i.y, i_p.z);
    return float4(v_px - v_nx, v_py - v_ny, v_pz - v_nz, v);
}

void WriteVertex(uint offset, float3 p, float3 n)
{
    uint addr_p = offset * SIZEOF_FLOAT3 * 2;
    uint addr_n = addr_p + SIZEOF_FLOAT3;
    VertexBuffer.Store3(addr_p, asuint(p));
    VertexBuffer.Store3(addr_n, asuint(n));
}

void WriteIndices(uint offset, uint3 indices)
{
    IndexBuffer.Store3(offset * SIZEOF_UINT, indices);
}

uint3 CubeVertex(uint index)
{
    bool x = index & 1;
    bool y = index & 2;
    bool z = index & 4;
    return uint3(x ^ y, y, z);
}

uint2 EdgeVertexPair(uint index)
{
    uint v1 = index & 7;
    uint v2 = index < 8 ? ((index + 1) & 3) | (index & 4) : v1 + 4;
    return uint2(v1, v2);
}

[numthreads(4, 4, 4)]
void Construct(uint3 id : SV_DispatchThreadID)
{
    if (any(id + 1 >= Dims.xyz)) return;

   
    float4 samples[8];
    for (uint i = 0; i < 8; i++)
        samples[i] = VoxelValueWithGradient(id + CubeVertex(i));

    uint selector = 0;
    for (int i = 0; i < 8; i++)
        selector |= (samples[i].w < TargetValue) << i;
    
    if (selector == 0 || selector == 0xff) return;
    
    float3 vertices[12];
    float3 normals[12];
    for (int i = 0; i < 12; i++)
    {
        uint2 pair = EdgeVertexPair(i);
        float4 sample1 = samples[pair.x];
        float4 sample2 = samples[pair.y];
        const float3 vertex1 = id + CubeVertex(pair.x);
        const float3 vertex2 = id + CubeVertex(pair.y);
        const float param = (TargetValue - sample1.w) / (sample2.w - sample1.w);
        vertices[i] = TransformPoint(lerp(vertex1, vertex2, param));
        normals[i] = -normalize(lerp(sample1.xyz, sample2.xyz, param));
    }
    
    const uint2 tri_data = TriangleTable[selector];
    for (int i = 0; i < 15; i += 3)
    {
        uint e1 = EdgeIndexFromTriangleTable(tri_data, i);
        uint e2 = EdgeIndexFromTriangleTable(tri_data, i + 1);
        uint e3 = EdgeIndexFromTriangleTable(tri_data, i + 2);
        if (e1 == 15) return;

        const uint count = Counter.IncrementCounter();
        if (count >= MaxTriangle) return;

        const uint vidx = count * 3;
        WriteVertex(vidx + 0, vertices[e1], normals[e1]);
        WriteVertex(vidx + 1, vertices[e2], normals[e2]);
        WriteVertex(vidx + 2, vertices[e3], normals[e3]);
        WriteIndices(vidx, uint3(vidx, vidx + 1, vidx + 2));
    }
}

[numthreads(64, 1, 1)]
void Clear(uint id : SV_DispatchThreadID)
{
    while (true)
    {
        const  uint count = Counter.IncrementCounter();
        if (count >= MaxTriangle) break;
        const  uint vidx = count * 3;
        WriteVertex(vidx + 0, 0, 0);
        WriteVertex(vidx + 1, 0, 0);
        WriteVertex(vidx + 2, 0, 0);
        WriteIndices(vidx, uint3(0, 0, 0));
    }
}
