#pragma kernel Construct
#pragma kernel Clear

#define SIZEOF_UINT 4
#define SIZEOF_FLOAT3 12

#define SHAPE_CUBE 0
#define SHAPE_SPHERE 1
#define SHAPE_CYLINDER 2
#define SHAPE_CAPSULE 3


struct SculptSolid
{
    float4x4 invTransform;
    float scale;    
    int type; 
    int op;
    float feather;
    float exp;
    float lerp;
    int priority;
};

StructuredBuffer<SculptSolid> Solids;
RWByteAddressBuffer VertexBuffer;
RWByteAddressBuffer IndexBuffer;
RWStructuredBuffer<uint> Counter;
StructuredBuffer<uint2> TriangleTable;
Texture3D<float> Field;
uint3 Dims;
uint MaxTriangle;
uint FlipNormals;
uint InvertTriangles; 
float2 Blend;
float Shrink;
float Shell;
int SolidCount;
float Phase;

float3 transformPoint(float4x4 m, float3 p)
{
    float4 worldPoint = float4(p, 1.0);
    float4 localPoint = mul(m, worldPoint);
    return localPoint.xyz;
}

// Distance functions for different shapes
float cubeDistance(float3 localPos)
{
    // For a unit cube centered at origin with extents [-0.5, 0.5]
    float3 absPos = abs(localPos);
    float3 outsideDistance = max(absPos - 0.5, 0.0);
    float outsideDist = length(outsideDistance);
    
    // Inside distance (negative when inside)
    float insideDist = max(max(absPos.x, absPos.y), absPos.z) - 0.5;
    
    return max(outsideDist, insideDist);
}

float sphereDistance(float3 localPos)
{
    // For a unit sphere centered at origin with radius 0.5
    return length(localPos) - 0.5;
}

float cylinderDistance(float3 localPos)
{
    // For a unit cylinder along Y axis, radius 0.5, height 1.0 (from -0.5 to 0.5)
    float2 xzPos = localPos.xz;
    float radialDist = length(xzPos) - 0.5;
    float heightDist = abs(localPos.y) - 0.5;
    
    float outsideDist = length(max(float2(radialDist, heightDist), 0.0));
    float insideDist = max(radialDist, heightDist);
    
    return max(outsideDist, insideDist);
}

float capsuleDistance(float3 localPos)
{
    // For a unit capsule along Y axis, radius 0.5, height 1.0
    float yPos = localPos.y;
    yPos = max(abs(yPos) - 0.25, 0.0) * sign(yPos); // Clamp to cylinder part
    
    float2 offset = float2(length(localPos.xz), yPos);
    return length(offset) - 0.5;
}

// Get distance based on shape type
float getShapeDistance(float3 localPos, int shapeType)
{
    switch(shapeType)
    {
    case SHAPE_CUBE:
        return cubeDistance(localPos);
    case SHAPE_SPHERE:
        return sphereDistance(localPos);
    case SHAPE_CYLINDER:
        return cylinderDistance(localPos);
    case SHAPE_CAPSULE:
        return capsuleDistance(localPos);
    default:
        return cubeDistance(localPos);
    }
}

float calculateMask(float distance, float thickness)
{
    if (distance <= 0.0)
        return 1.0;
    if (distance >= thickness)
        return 0.0;
    return smoothstep(1.0, 0.0, distance / thickness);
}

float calculateMaskLinear(float distance, float thickness)
{
    return saturate(1.0 - distance / thickness);
}

float calculateMaskExponential(float distance, float thickness, float falloffPower)
{
    if (distance <= 0.0)
        return 1.0;
    
    float normalizedDist = saturate(distance / thickness);
    return pow(1.0 - normalizedDist, falloffPower);
}

float combineMasks(float mask1, float mask2, int combineMode)
{
    switch(combineMode)
    {
    case 0: return max(mask1, mask2);           // Union
    case 1: return min(mask1, mask2);           // Intersection
    case 2: return saturate(mask1 - mask2);     // Subtract
    case 3: return saturate(mask1 + mask2);     // Additive
    default: return max(mask1, mask2);
    }
}

float evaluateSolidField(float3 p, SculptSolid solid)
{
    float4x4 worldToLocal = solid.invTransform;

    float3 localPos = transformPoint(worldToLocal, p);

    float distance = getShapeDistance(localPos, solid.type);

    float shapeMask = calculateMask(distance, solid.feather);
    
    return shapeMask * solid.scale;
}

float3 TransformPoint(float3 p)
{
    return (p + 0.5 - Dims / 2) * (2.0 / Dims.x);
}

uint EdgeIndexFromTriangleTable(uint2 data, uint index)
{
    return 0xfu & (index < 8 ? data.x >> ((index + 0) * 4) :
                               data.y >> ((index - 8) * 4));
}

float sampleMask(uint3 id)
{
    float ux = float(id.x - float(Dims.x) * 0.5) / Dims.x;
    float uy = float(id.y - float(Dims.y) * 0.5) / Dims.x;
    float uz = float(id.z - float(Dims.z) * 0.5) / Dims.x;
    
    float3 p = float3(ux, uy, uz);
    
    float alpha = 1.0;
    
    for (int k = 0; k < SolidCount; k++)
    {
        float f = evaluateSolidField(p, Solids[k]);
        SculptSolid s = Solids[k];
        switch (s.op)
        {
        case 0:
            alpha += f;
            break;
        case 1:
            alpha *= f;
            break;
        case 2:
            alpha = max(f, alpha);
            break;
        case 3:
            alpha = lerp(alpha, f, s.lerp);
            break;
        case 4:
            alpha = f > 0 ? 1.0 : 0;
            break;
        default:
               
                break;
        }
    }
    return alpha;
}

float sampleFieldVoxel(uint x, uint y, uint z)
{
    float t = Field[uint3(x,y,z)];
    t *= sampleMask(uint3(x,y,z));
    return t;
}

float4 VoxelValueWithGradient(uint3 i)
{
    const uint3 i_n = max(i, 1) - 1;
    const uint3 i_p = min(i + 1, Dims - 1);
    
    // Sample the field values
    const float center = sampleFieldVoxel(i.x, i.y, i.z);
    const float v_nx = sampleFieldVoxel(i_n.x, i.y, i.z);
    const float v_px = sampleFieldVoxel(i_p.x, i.y, i.z);
    const float v_ny = sampleFieldVoxel(i.x, i_n.y, i.z);
    const float v_py = sampleFieldVoxel(i.x, i_p.y, i.z);
    const float v_nz = sampleFieldVoxel(i.x, i.y, i_n.z);
    const float v_pz = sampleFieldVoxel(i.x, i.y, i_p.z);
    
    // Calculate gradient from the original field (this gives us correct normals)
    const float3 gradient = float3(v_px - v_nx, v_py - v_ny, v_pz - v_nz);
    
    float marchingValue = center - Shell;
    
    return float4(gradient, marchingValue);
}

void WriteVertex(uint offset, float3 p, float3 n)
{
    uint addr_p = offset * SIZEOF_FLOAT3 * 2;
    uint addr_n = addr_p + SIZEOF_FLOAT3;
    VertexBuffer.Store3(addr_p, asuint(p + n * Shrink));
    VertexBuffer.Store3(addr_n, asuint(n));
}

void WriteIndices(uint offset, uint3 indices)
{
    IndexBuffer.Store3(offset * SIZEOF_UINT, indices);
}

uint3 CubeVertex(uint index)
{
    bool x = index & 1;
    bool y = index & 2;
    bool z = index & 4;
    return uint3(x ^ y, y, z);
}

uint2 EdgeVertexPair(uint index)
{
    uint v1 = index & 7;
    uint v2 = index < 8 ? ((index + 1) & 3) | (index & 4) : v1 + 4;
    return uint2(v1, v2);
}

[numthreads(8, 8, 1)]
void Construct(uint3 id : SV_DispatchThreadID)
{
    if (any(id + 1 >= Dims.xyz)) return;

    uint i;
    
    float totalAlpha = 0;
    
    for (i = 0; i < 8; i++)
    {
        float a = sampleMask(id + CubeVertex(i));
        totalAlpha += a;
    }

    if (totalAlpha == 0) return;

    float4 samples[8];
    
    for (i = 0; i < 8; i++)
        samples[i] = VoxelValueWithGradient(id + CubeVertex(i));

    uint selector = 0;
    for (i = 0; i < 8; i++)
        selector |= (samples[i].w > 0) << i;
    
    if (selector == 0 || selector == 0xff) return;
    
    float3 vertices[12];
    float3 normals[12];
    for (i = 0; i < 12; i++)
    {
        uint2 pair = EdgeVertexPair(i);
        float4 sample1 = samples[pair.x];
        float4 sample2 = samples[pair.y];
        const float3 vertex1 = id + CubeVertex(pair.x);
        const float3 vertex2 = id + CubeVertex(pair.y);
        
        // Interpolate based on zero crossing
        const float param = sample1.w / (sample1.w - sample2.w);
        vertices[i] = TransformPoint(lerp(vertex1, vertex2, param));
        
        // Interpolate gradients and normalize to get normal
        float3 normal = -normalize(lerp(sample1.xyz, sample2.xyz, param));
        
        // Apply flip normals if requested
        normals[i] = FlipNormals ? -normal : normal;
    }
    
    const uint2 tri_data = TriangleTable[selector];
    for (i = 0; i < 15; i += 3)
    {
        uint e3;
        uint e2;
        uint e1;

        if (InvertTriangles == 1)
        {
            e3 = EdgeIndexFromTriangleTable(tri_data, i);
            e2 = EdgeIndexFromTriangleTable(tri_data, i + 1);
            e1 = EdgeIndexFromTriangleTable(tri_data, i + 2);
            if (e3 == 15) return;
        }
        else
        {
            e1 = EdgeIndexFromTriangleTable(tri_data, i);
            e2 = EdgeIndexFromTriangleTable(tri_data, i + 1);
            e3 = EdgeIndexFromTriangleTable(tri_data, i + 2);
            if (e1 == 15) return;
        }
        
        const uint count = Counter.IncrementCounter();
        if (count >= MaxTriangle) return;

        const uint vidx = count * 3;
        WriteVertex(vidx + 0, vertices[e1], normals[e1]);
        WriteVertex(vidx + 1, vertices[e2], normals[e2]);
        WriteVertex(vidx + 2, vertices[e3], normals[e3]);
        WriteIndices(vidx, uint3(vidx, vidx + 1, vidx + 2));
    }
}

[numthreads(64, 1, 1)]
void Clear(uint id : SV_DispatchThreadID)
{
    while (true)
    {
        const  uint count = Counter.IncrementCounter();
        if (count >= MaxTriangle) break;
        const  uint vidx = count * 3;
        WriteVertex(vidx + 0, 0, 0);
        WriteVertex(vidx + 1, 0, 0);
        WriteVertex(vidx + 2, 0, 0);
        WriteIndices(vidx, uint3(0, 0, 0));
    }
}