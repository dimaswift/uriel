#pragma kernel CSMain

#include "Assets/Scripts/Lib/Uriel.cginc"

StructuredBuffer<float3> _InputVertexBuffer;
RWStructuredBuffer<float3> _OutputVertexBuffer;
RWStructuredBuffer<float3> _NormalBuffer;
StructuredBuffer<Photon> _PhotonBuffer;
int _PhotonCount;
float _Scale;
float _Frequency;
float _Amplitude;
float _Phase;
float _Time;
float _Speed;
int _Steps;
float _Min;
float _Max;

[numthreads(64,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    const float3 vertex = _InputVertexBuffer[id.x];
    const float3 normal = _NormalBuffer[id.x];
    float value = 0.0;
    float l = length(vertex);
    const float step_size = l / _Steps;
    const float3 dir = normalize(vertex);
    for (int i = 0; i < _Steps; ++i)
    {
        const float3 target = vertex + dir * i * step_size  * _Scale;
        const float density = sampleField(target, _PhotonCount, _PhotonBuffer);
        value += sin(density * (_Frequency + (_Time * _Speed + _Phase))) * _Amplitude;
    }
    _OutputVertexBuffer[id.x] = vertex + float3(normal) * sin(value);
}
